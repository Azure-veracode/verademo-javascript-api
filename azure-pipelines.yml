# This script will do the autopackaging and upload and scan in the Veracode portal

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Bash@3
  displayName: 'Install Veracode CLI and Package Scan'
  inputs:
    targetType: 'inline'
    script: |
      curl -fsS https://tools.veracode.com/veracode-cli/install | sh
      ./veracode package -das $(Build.SourcesDirectory) --output ./verascan

      # Check if the verascan directory exists
      if [ ! -d "verascan" ]; then
        echo "Error: verascan directory not found."
        exit 1
      fi

# - script: |
#     curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
#   displayName: "Download Pipeline Scan"
# - task: ExtractFiles@1
#   inputs:
#     archiveFilePatterns: "pipeline-scan-LATEST.zip"
#     destinationFolder: "pipeline"
#     cleanDestinationFolder: false
# - script: |
#     ls
#     java -jar pipeline\pipeline-scan.jar --veracode_api_id "$(VERACODE_API_ID)" --veracode_api_key "$(VERACODE_API_KEY)" --file "./verascan" --json_output_file="baseline.json" || true
#     # Pipeline Scan command. VERACODE_API_ID and VERACODE_API_KEY must reference your API credentials.
#     # "--json_output_file" saves scan results as a JSON file that you can use as a baseline file.
#   env:
#     VERACODE_API_ID: $(VERACODE_API_ID)
#     VERACODE_API_KEY: $(VERACODE_API_KEY)
#   displayName: "Run Pipeline Scan"
# - publish: $(System.DefaultWorkingDirectory)/baseline.json
#   artifact: baseline

- task: Veracode@3
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'Veracode-Arun-GM'
    veracodeAppProfile: 'Recent'
    version: '$(build.buildNumber)'
    filepath: './verascan'
    sandboxName: 'Test'
    createSandBox: true
    optargs: 'deleteincompletescan1'
    failBuildIfUploadAndScanBuildStepFails: true
    importResults: true
    maximumWaitTime: '360'